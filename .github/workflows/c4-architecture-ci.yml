name: C4 Architecture Documentation CI/CD

permissions:
  contents: write

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  component-change-detection:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout your code & fetch all branches
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Clone the project under test
      - name: Clone target project
        run: |
          git clone https://x-access-token:${{ secrets.PRIVATE_REPO_TOKEN }}@github.com/imissr/Spring_Kfz_Project.git scanned-project

      # 3) Pull in previous snapshot (if any)
      - name: Fetch previous snapshot
        run: |
          git fetch origin snapshot
          mkdir -p discovered-components
          git show origin/snapshot:discovered-components/components-latest.json \
            > discovered-components/components-latest.json || echo "No previous snapshot found"

      # 4) Build your C4 generator
      - name: Set up JDK 22 & build generator
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '22'
      - name: Cache Maven deps
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
      - name: Compile & package C4 generator
        run: mvn clean package -DskipTests

      # 5) Compile scanned project & patch config
      - name: Compile scanned project
        working-directory: scanned-project
        run: mvn clean compile -DskipTests

      - name: Patch strategyConfig.json
        run: |
          jq '.globalConfig.basePaths |= with_entries(.value="scanned-project/target/classes")' \
            src/main/java/org/example/json/strategyConfig.json \
            > strategyConfig.patched.json

      # 6) Detect & regenerate (exit code 1 if changed, 0 if no-change)
      - name: Detect & generate C4 docs
        id: detect
        run: |
          set +e
          mvn exec:java \
            -Dexec.mainClass="org.example.c4.C4ModelGenerator" \
            -Dexec.args="generate-if-changed strategyConfig.patched.json" -q
          code=$?
          if [ $code -eq 1 ]; then
            echo "::notice::Changes detected – regenerated docs & snapshots"
            echo "changes_detected=true" >> $GITHUB_OUTPUT
          elif [ $code -eq 0 ]; then
            echo "::notice::No changes detected"
            echo "changes_detected=false" >> $GITHUB_OUTPUT
          else
            echo "::error::Detection failed (exit code $code)"
            exit $code
          fi

      # 7) Upload artifacts if changed
      - name: Upload C4 model artifacts
        if: steps.detect.outputs.changes_detected == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: c4-architecture-model
          path: |
            avatar-c4-model.json
            discovered-components/
          retention-days: 30

      # 8) Checkout snapshot branch into snapshot/
      - name: Checkout snapshot branch
        if: steps.detect.outputs.changes_detected == 'true'
        uses: actions/checkout@v4
        with:
          ref: snapshot
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          path: snapshot

      # 9) Overwrite its discovered-components/
      - name: Update snapshot files
        if: steps.detect.outputs.changes_detected == 'true'
        run: |
          rm -rf snapshot/discovered-components
          cp -R discovered-components snapshot/

      # 10) Commit & push only if there are real diffs
      - name: Commit & push snapshot
        if: steps.detect.outputs.changes_detected == 'true'
        run: |
          cd snapshot
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add discovered-components
          # Only commit when there are changes
          if git diff --cached --quiet; then
            echo "No snapshot changes to commit"
          else
            git commit -m "⬆️ Update C4 component snapshots @ ${{ github.sha }}"
            git push origin HEAD:snapshot --force
          fi
