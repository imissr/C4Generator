name: C4 Architecture Documentation CI/CD
# ← add this!
permissions:
  contents: write


on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  component-change-detection:
    runs-on: ubuntu-latest

    steps:
      # 1) Check out THIS repo (your C4 generator + snapshots branch)
      - name: Checkout C4 generator repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0            # needed for branching & force-push

      # 2) Set up Java & build your generator
      - name: Set up JDK 22
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '22'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2

      - name: Compile & package C4 generator
        run: mvn clean package -DskipTests

      # 3) Clone the target project you’re scanning
      - name: Clone private target project
        run: |
          git clone https://x-access-token:${{ secrets.PRIVATE_REPO_TOKEN }}@github.com/imissr/Spring_Kfz_Project.git scanned-project


      # 5) Compile the scanned project & prepare config
      - name: Compile scanned project
        working-directory: ./scanned-project
        run: mvn clean compile -DskipTests

      - name: Patch config.json for all basePaths
        run: |
          jq '.globalConfig.basePaths |= with_entries(.value = "scanned-project/target/classes")' \
             src/main/java/org/example/json/strategyConfig.json \
            > strategyConfig.patched.json

      # 6) Run your change‑detection (with initial‑baseline logic)
      - name: Run component change detection
        id: change-detection
        run: |
          set -o pipefail

          # Do we already have a previous snapshot?
          if [ -f discovered-components/components-latest.json ]; then
            has_prev=true
          else
            has_prev=false
          fi

          # Always invoke the generator (it writes out a new snapshot)
          mvn exec:java \
            -Dexec.mainClass="org.example.c4.C4ModelGenerator" \
            -Dexec.args="generate-if-changed strategyConfig.patched.json" \
            -q
          exit_code=$?

          if [ "$has_prev" = false ]; then
            # First run → treat as “change detected”
            echo "::notice::No previous snapshot found – treating as initial baseline"
            echo "changes_detected=true" >> $GITHUB_OUTPUT
            echo "should_generate=true"  >> $GITHUB_OUTPUT
          else
            # Subsequent runs: exit 0=no-change, 1=changes, else=error
            if [ $exit_code -eq 0 ]; then
              echo "changes_detected=false" >> $GITHUB_OUTPUT
              echo "should_generate=false" >> $GITHUB_OUTPUT
            elif [ $exit_code -eq 1 ]; then
              echo "changes_detected=true"  >> $GITHUB_OUTPUT
              echo "should_generate=true"   >> $GITHUB_OUTPUT
            else
              echo "::error::Change detection failed (exit code: $exit_code)"
              exit $exit_code
            fi
          fi

      # 7) If changed, regenerate & upload artifacts
      - name: Generate C4 documentation
        if: steps.change-detection.outputs.should_generate == 'true'
        run: |
          mvn exec:java \
            -Dexec.mainClass="org.example.c4.C4ModelGenerator" \
            -Dexec.args="generate-if-changed strategyConfig.patched.json"

      - name: Upload C4 model artifacts
        if: steps.change-detection.outputs.should_generate == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: c4-architecture-model
          path: |
            avatar-c4-model.json
            discovered-components/
          retention-days: 30

      # 8) Commit updated snapshots back to `snapshot` branch
      - name: Push updated snapshots
        if: steps.change-detection.outputs.changes_detected == 'true'
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Decide commit message
          if git ls-remote --exit-code origin snapshot; then
            commit_msg="⬆️ Update C4 component snapshots @ ${{ github.sha }}"
          else
            commit_msg="✨ Initial C4 component snapshots @ ${{ github.sha }}"
          fi

          # Create orphan snapshot branch containing *only* discovered-components
          git checkout --orphan snapshot
          git add discovered-components
          git commit -m "$commit_msg"
          git push --force origin snapshot
