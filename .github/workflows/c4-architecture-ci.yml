name: C4 Architecture Documentation CI/CD

permissions:
  contents: write

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  component-change-detection:
    runs-on: ubuntu-latest

    steps:
      # 1) Check out THIS repo (your C4 generator + any existing snapshot branch)
      - name: Checkout C4 generator repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0        # need full history & existing branches

      # 2) Set up Java & build your generator
      - name: Set up JDK 22
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '22'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2

      - name: Compile & package C4 generator
        run: mvn clean package -DskipTests

      # 3) Clone the target project you’re scanning
      - name: Clone target project
        run: |
          git clone https://x-access-token:${{ secrets.PRIVATE_REPO_TOKEN }}@github.com/imissr/Spring_Kfz_Project.git scanned-project

      # 4) Pull in the previous snapshot (if any)
      - name: Fetch previous snapshot
        run: |
          git fetch origin snapshot
          mkdir -p discovered-components
          # try to extract existing components-latest.json; if none, note it
          if git show origin/snapshot:discovered-components/components-latest.json > discovered-components/components-latest.json; then
            echo "✅ Loaded previous snapshot"
          else
            echo "::notice::No previous snapshot found — will treat this as initial baseline"
          fi

      # 5) Compile the scanned project & prepare config
      - name: Compile scanned project
        working-directory: scanned-project
        run: mvn clean compile -DskipTests

      - name: Patch config.json for basePaths
        run: |
          jq '.globalConfig.basePaths |= with_entries(.value = "scanned-project/target/classes")' \
            src/main/java/org/example/json/strategyConfig.json \
            > strategyConfig.patched.json

      # 6) Run change‑detection
      - name: Run component change detection
        id: detect
        run: |
          set -o pipefail

          # do we have a previous snapshot file?
          if [ -f discovered-components/components-latest.json ]; then
            has_prev=true
          else
            has_prev=false
          fi

          # invoke your generator (it writes a new snapshot under discovered-components/)
          mvn exec:java \
            -Dexec.mainClass="org.example.c4.C4ModelGenerator" \
            -Dexec.args="generate-if-changed strategyConfig.patched.json" \
            -q
          exit_code=$?

          if [ "$has_prev" = false ]; then
            # first-ever run → initial baseline
            echo "::notice::Initial baseline"
            echo "changes_detected=true" >> $GITHUB_OUTPUT
            echo "should_generate=true"  >> $GITHUB_OUTPUT
          else
            # 0 = no change, 1 = changed, else = error
            if [ $exit_code -eq 0 ]; then
              echo "changes_detected=false" >> $GITHUB_OUTPUT
              echo "should_generate=false" >> $GITHUB_OUTPUT
            elif [ $exit_code -eq 1 ]; then
              echo "changes_detected=true"  >> $GITHUB_OUTPUT
              echo "should_generate=true"   >> $GITHUB_OUTPUT
            else
              echo "::error::Change detection failed (exit code: $exit_code)"
              exit $exit_code
            fi
          fi

      # 7) Regenerate & upload artifacts if needed
      - name: Generate C4 documentation
        if: steps.detect.outputs.should_generate == 'true'
        run: |
          mvn exec:java \
            -Dexec.mainClass="org.example.c4.C4ModelGenerator" \
            -Dexec.args="generate-if-changed strategyConfig.patched.json"

      - name: Upload C4 model artifacts
        if: steps.detect.outputs.should_generate == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: c4-architecture-model
          path: |
            avatar-c4-model.json
            discovered-components/
          retention-days: 30

      # 8) Push updated snapshots back to `snapshot` branch
      - name: Push updated snapshots
        if: steps.detect.outputs.changes_detected == 'true'
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # stash the newly generated snapshots
          tmp_dir=$(mktemp -d)
          cp -R discovered-components "$tmp_dir/"

          # fetch & switch (or create) the snapshot branch
          if git ls-remote --exit-code origin snapshot; then
            git fetch origin snapshot
            git checkout origin/snapshot -B snapshot
          else
            git checkout --orphan snapshot
          fi

          # remove everything tracked, then restore only our snapshots
          git rm -rf .
          mv "$tmp_dir/discovered-components" .
          git add -f discovered-components

          # only commit & push if there really are changes
          if git diff --cached --quiet; then
            echo "No snapshot changes to commit"
          else
            # choose an initial vs. update commit message
            if git ls-remote --exit-code origin snapshot; then
              msg="⬆️ Update C4 component snapshots @ ${{ github.sha }}"
            else
              msg="✨ Initial C4 component snapshots @ ${{ github.sha }}"
            fi
            git commit -m "$msg"
            git push --force origin snapshot
          fi
