name: C4 Architecture Documentation CI/CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  component-change-detection:
    runs-on: ubuntu-latest
    steps:
      # 1) Check out THIS repo (your C4 generator + snapshots branch)
      - name: Checkout C4 generator repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0            # needed for branching & force-push

      # 2) Set up Java & build your generator
      - name: Set up JDK 22
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '22'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2

      - name: Compile & package C4 generator
        run: mvn clean package -DskipTests

      # 3) Clone the target project you’re scanning
      - name: Clone private target project
        run: |
          git clone https://x-access-token:${{ secrets.PRIVATE_REPO_TOKEN }}@github.com/imissr/Spring_Kfz_Project.git scanned-project

      # 4) Fetch & unpack the last snapshot from `snapshot` branch
      - name: Fetch snapshot branch
        run: |
          # allow failure if branch doesn’t exist yet
          git fetch origin snapshot:refs/remotes/origin/snapshot || true

      - name: Restore previous snapshots (if any)
        run: |
          if git show-ref --quiet refs/remotes/origin/snapshot; then
            mkdir -p discovered-components
            git archive origin/snapshot discovered-components | tar -x -C .
          fi

      # 5) Compile the scanned project & prepare config
      - name: Compile scanned project
        working-directory: ./scanned-project
        run: mvn clean compile -DskipTests

      - name: Patch config.json for all basePaths
        run: |
          jq '.globalConfig.basePaths |= with_entries(.value = "scanned-project/target/classes")' \
             src/main/java/org/example/json/strategyConfig.json \
            > strategyConfig.patched.json

      # 6) Run your change‑detection
      - name: Run component change detection
        id: change-detection
        run: |
          set -o pipefail
          if mvn exec:java \
               -Dexec.mainClass="org.example.c4.C4ModelGenerator" \
               -Dexec.args="generate-if-changed strategyConfig.patched.json" \
               -q; then
            echo "changes_detected=false" >> $GITHUB_OUTPUT
            echo "should_generate=false" >> $GITHUB_OUTPUT
          else
            exit_code=$?
            if [ $exit_code -eq 1 ]; then
              echo "changes_detected=true"  >> $GITHUB_OUTPUT
              echo "should_generate=true"   >> $GITHUB_OUTPUT
            else
              echo "::error::Change detection failed (exit code: $exit_code)"
              exit $exit_code
            fi
          fi

      # 7) If changed, regenerate & upload artifacts
      - name: Generate C4 documentation
        if: steps.change-detection.outputs.should_generate == 'true'
        run: |
          mvn exec:java \
            -Dexec.mainClass="org.example.c4.C4ModelGenerator" \
            -Dexec.args="generate-if-changed strategyConfig.patched.json"

      - name: Upload C4 model artifacts
        if: steps.change-detection.outputs.should_generate == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: c4-architecture-model
          path: |
            avatar-c4-model.json
            discovered-components/
          retention-days: 30

      # 8) Commit updated snapshots back to `snapshot` branch (initial or update)
      - name: Push updated snapshots
        if: steps.change-detection.outputs.should_generate == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Prepare commit message and branch
          if git ls-remote --exit-code origin snapshot; then
            echo "🔄 Snapshot branch exists – updating"
            commit_msg="⬆️ Update C4 component snapshots @ ${{ github.sha }}"
            git fetch origin snapshot:snapshot
            git checkout snapshot
            git rm -rf .
          else
            echo "🌱 No snapshot branch found – creating initial snapshot"
            commit_msg="✨ Initial C4 component snapshots @ ${{ github.sha }}"
            git checkout --orphan snapshot
            git rm -rf .
          fi

          # Copy and commit the new snapshots
          cp -R discovered-components .
          git add discovered-components
          git commit -m "$commit_msg"
          git push --force origin snapshot

      # 9) Produce & upload the change-report (as before)
      - name: Generate component change report
        if: steps.change-detection.outputs.changes_detected == 'true'
        run: |
          cat > component-change-report.md << 'EOF'
          # 🏗️ Component Architecture Changes Detected

          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")

          ## Changes Summary
          A new C4 model has been generated and is available in the artifacts.

          ## Files Updated
          - avatar-c4-model.json
          - discovered-components/components-*.json

          ## Next Steps
          1. Review the generated C4 model  
          2. Update architectural docs  
          3. Refresh diagrams if needed  
          EOF

      - name: Upload change report
        if: steps.change-detection.outputs.changes_detected == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: component-change-report
          path: component-change-report.md
          retention-days: 30

      - name: Comment on PR
        if: steps.change-detection.outputs.changes_detected == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const body = require('fs').readFileSync('component-change-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            })

    outputs:
      changes_detected: ${{ steps.change-detection.outputs.changes_detected }}
      should_generate:  ${{ steps.change-detection.outputs.should_generate }}

  deploy-documentation:
    needs: component-change-detection
    if: needs.component-change-detection.outputs.should_generate == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Download C4 model artifacts
        uses: actions/download-artifact@v4
        with:
          name: c4-architecture-model

      - name: Deploy to documentation site
        run: |
          echo "🚀 Deploying updated architecture documentation..."
          # TODO: upload to S3 / rebuild site / trigger diagram service / notify stakeholders

      - name: Create deployment summary
        run: |
          echo "✅ Documentation deployed" >> $GITHUB_STEP_SUMMARY
          echo "- C4 model refreshed"      >> $GITHUB_STEP_SUMMARY
          echo "- Site rebuild triggered"  >> $GITHUB_STEP_SUMMARY
          echo "- Stakeholders notified"   >> $GITHUB_STEP_SUMMARY
