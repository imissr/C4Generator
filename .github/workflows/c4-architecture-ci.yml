name: C4 Architecture Documentation CI/CD

on:
  repository_dispatch:
    types: [ c4-scan-request ]

permissions:
  contents: write

jobs:
  component-change-detection:
    runs-on: ubuntu-latest

    steps:
      # --- 0) Identify dispatched repo & derive a safe slug for its folder ---
      - name: Set repository identifiers
        id: set-ids
        run: |
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            REPO="${{ github.event.client_payload.source_repo }}"
            REF_FULL="${{ github.event.client_payload.ref }}"
            SHA="${{ github.event.client_payload.sha }}"
            echo " Dispatch from $REPO @ $REF_FULL ($SHA)"
            BRANCH="${REF_FULL#refs/heads/}"
          else
            REPO="imissr/Spring_Kfz_Project"
            BRANCH="master"
            SHA="master"
            echo "Fallback clone of $REPO @ $BRANCH"
          fi

          # slugify: substitute non-alphanumeric with underscores
          REPO_SLUG=$(echo "$REPO" | sed -E 's/[^A-Za-z0-9]+/_/g')
          echo "repo=$REPO" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "sha=$SHA" >> $GITHUB_OUTPUT
          echo "repo_slug=$REPO_SLUG" >> $GITHUB_OUTPUT

      # 1) Checkout this CI repo (configs + snapshot logic)
      - name: Checkout C4 CI code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 1.1) Ensure snapshot branch exists
      - name: Ensure snapshot branch exists
        id: ensure-snapshot
        run: |
          DEFAULT_BRANCH=${GITHUB_REF#refs/heads/}
          if ! git ls-remote --exit-code origin snapshot; then
            git checkout --orphan snapshot
            git rm -rf .
            git config user.name  "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git commit --allow-empty -m "Initialize snapshot branch"
            git push origin snapshot
            git checkout "$DEFAULT_BRANCH"
            echo "snapshot_created=true" >> $GITHUB_OUTPUT
          else
            echo "snapshot_created=false" >> $GITHUB_OUTPUT
          fi

      # 2) Sparse-clone only the per-repo snapshot subfolder if snapshot already existed
      - name: Fetch previous per-repo snapshot (sparse)
        if: steps.ensure-snapshot.outputs.snapshot_created == 'false'
        run: |
          REPO_SLUG=${{ steps.set-ids.outputs.repo_slug }}
          # Clone snapshot branch sparsely, only the per-repo folder we care about
          git clone --filter=blob:none --no-checkout --branch snapshot \
            https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git snapshot
          cd snapshot
          git sparse-checkout init --cone
          # include discovered-components and avatar model for this slug if they exist
          git sparse-checkout set "$REPO_SLUG/discovered-components/components-latest.json" "$REPO_SLUG/avatar-c4-model.json"
          git checkout snapshot

      # 3) Determine baseline vs change-detect for this repo
      - name: Determine baseline vs change-detect
        id: determine-mode
        run: |
          REPO_SLUG=${{ steps.set-ids.outputs.repo_slug }}

          if [ "${{ steps.ensure-snapshot.outputs.snapshot_created }}" = "true" ]; then
            echo "baseline_mode=true" >> $GITHUB_OUTPUT
          elif [ ! -f snapshot/$REPO_SLUG/discovered-components/components-latest.json ]; then
            echo "baseline_mode=true" >> $GITHUB_OUTPUT
          else
            echo "baseline_mode=false" >> $GITHUB_OUTPUT
            mkdir -p discovered-components
            cp snapshot/$REPO_SLUG/discovered-components/components-latest.json \
               discovered-components/components-latest.json
          fi

      # 4) Clone & checkout the dispatched (scanned) project
      - name: Clone scanned project (from dispatch payload)
        run: |
          REPO=${{ steps.set-ids.outputs.repo }}
          BRANCH=${{ steps.set-ids.outputs.branch }}
          SHA=${{ steps.set-ids.outputs.sha }}

          git clone \
            --branch "$BRANCH" \
            https://x-access-token:${{ secrets.PRIVATE_REPO_TOKEN }}@github.com/${REPO}.git \
            scanned-project
          cd scanned-project
          git checkout "$SHA"
          cd ..

      # 5) Build & run your C4 generator against scanned-project
      - name: Set up JDK 22
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '22'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}

      - name: Compile & package C4 generator
        run: mvn clean package -DskipTests

      - name: Compile scanned project
        working-directory: scanned-project
        run: mvn clean compile -DskipTests

      - name: Patch strategyConfig.json
        run: |
          jq '.globalConfig.basePaths |= with_entries(.value="scanned-project/target/classes")' \
            src/main/java/org/example/json/strategyConfig.json \
            > strategyConfig.patched.json

      # 5a) BASELINE snapshot generation
      - name: Run baseline snapshot
        if: steps.determine-mode.outputs.baseline_mode == 'true'
        run: |
          mvn exec:java \
            -Dexec.mainClass="org.example.c4.C4ModelGeneratorCI" \
            -Dexec.args="baseline src/main/java/org/example/json/c4ModelConfig.json"

      # 5b) CHANGE-DETECT
      - name: Detect changes in C4 components
        if: steps.determine-mode.outputs.baseline_mode == 'false'
        id: change-detection
        continue-on-error: true
        run: |
          set +e
          mvn exec:java \
            -Dexec.mainClass="org.example.c4.C4ModelGeneratorCI" \
            -Dexec.args="change-detect src/main/java/org/example/json/c4ModelConfig.json"
          echo "changes_detected=$([[ $? -eq 1 ]] && echo true || echo false)" >> $GITHUB_OUTPUT

      # Always generate if baseline OR changes detected
      - name: Run C4 model generator
        if: steps.determine-mode.outputs.baseline_mode == 'true' || steps.change-detection.outputs.changes_detected == 'true'
        run: |
          mvn exec:java \
            -Dexec.mainClass="org.example.c4.C4ModelGeneratorCI" \
            -Dexec.args="generate-if-changed src/main/java/org/example/json/c4ModelConfig.json"

      # 6) Upload artifacts (per-repo naming)
      - name: Upload baseline snapshot
        if: steps.determine-mode.outputs.baseline_mode == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: baseline-component-snapshot-${{ steps.set-ids.outputs.repo_slug }}
          path: discovered-components/
          retention-days: 30

      - name: Upload C4 model artifacts
        if: steps.determine-mode.outputs.baseline_mode == 'false' && steps.change-detection.outputs.changes_detected == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: c4-architecture-model-${{ steps.set-ids.outputs.repo_slug }}
          path: |
            avatar-c4-model.json
            discovered-components/
          retention-days: 30

      # 7) Update snapshot branch for this repo
      - name: Prepare updated snapshot for repo
        if: steps.determine-mode.outputs.baseline_mode == 'true' || (steps.determine-mode.outputs.baseline_mode == 'false' && steps.change-detection.outputs.changes_detected == 'true')
        run: |
          REPO_SLUG=${{ steps.set-ids.outputs.repo_slug }}
          # Ensure we have the snapshot clone available; if it wasn't cloned (fresh snapshot branch), do a full checkout
          if [ ! -d snapshot ]; then
            git clone --branch snapshot https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git snapshot
          fi
          # Replace per-repo snapshot contents
          rm -rf snapshot/$REPO_SLUG/discovered-components
          mkdir -p snapshot/$REPO_SLUG
          cp -R discovered-components snapshot/$REPO_SLUG/discovered-components
          cp avatar-c4-model.json snapshot/$REPO_SLUG/avatar-c4-model.json || true

      - name: Commit & push per-repo snapshot update
        if: steps.determine-mode.outputs.baseline_mode == 'true' || (steps.determine-mode.outputs.baseline_mode == 'false' && steps.change-detection.outputs.changes_detected == 'true')
        run: |
          cd snapshot
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          REPO_SLUG=${{ steps.set-ids.outputs.repo_slug }}
          git add "$REPO_SLUG/discovered-components"
          git add "$REPO_SLUG/avatar-c4-model.json" || true
          if ! git diff --cached --quiet; then
            git commit -m " Update C4 component snapshot & avatar model for $REPO_SLUG @ ${{ github.sha }}"
            git push origin HEAD:snapshot
          fi
